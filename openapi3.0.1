openapi: 3.0.1
info:
  title: Sample catalogue
  description: Sample server representing simple storage system.
  version: 1.0.0
servers:
  - url: /
tags:
  - name: catalogue
    description: simple k-v storage
paths:
  /catalogue:
    get:
      tags:
        - catalogue
      summary: Gets a list of all elements.
      operationId: getCatalogue
      parameters:
        - $ref: '#/components/parameters/offsetParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/sortingParam'
      responses:
        200:
          description: An array of elements
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Element'
        400:
          description: Bad request
          content: {}
    post:
      tags:
        - catalogue
      summary: Add a new element to the storage
      operationId: addElement
      requestBody:
        description: An element that needs to be added to the storage
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Element'
        required: true
      responses:
        409: 
          description: Conflict 
          content: {}
        412:
          description: Precondition Failed
          content: {}
      x-codegen-request-body-name: body
  /catalogue/{ElementId}:
    get:
      tags:
        - catalogue
      summary: Find element by it's ID
      operationId: getElementByName
      parameters:
        - name: ElementId
          in: path
          required: true
          explode: true
          schema:
            type: integer
            format: int64
            default: 0
      responses:
        200:
          description: A single element
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Element'
        400:
          description: Invalid name value
          content: {}
    delete:
      tags:
        - catalogue
      summary: Delete an element from the storage
      description: ""
      operationId: deleteElement
      parameters:
        - name: ElementId
          in: path
          description: Element id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Element not found
          content: {}
        
components:
  schemas:
    Element:
      type: object
      properties:
        elid:
          type: integer
          format: int64
        elname:
         type: string
        elsize:
          type: number
    SortingEnum:
      type: array
      items:
        type: array
        items: 
          enum: [name, size, asc, desc]
        minItems: 2
        maxItems: 2
      minItems: 1
      maxItems: 2
  
  parameters:
    offsetParam:
      name: offset
      in: query
      description: The number of items to skip before starting to collect the result set.
      schema:
        type: integer
        format: int32
        default: 10
    limitParam:
      name: limit
      in: query
      description: The numbers of items to return.
      schema:
        type: integer
        format: int32
        default: 10
      required: true
    sortingParam:
      name: sort
      in: query
      description: Sort a result.
      schema: 
          $ref: '#/components/schemas/SortingEnum'
      style: pipeDelimited
      explode: true
